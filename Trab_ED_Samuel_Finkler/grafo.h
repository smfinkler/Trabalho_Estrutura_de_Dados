typedef struct grafo Grafo;
typedef struct vertice Vertice;
typedef struct aresta Aresta;
typedef struct item Item;
typedef struct lista Lista;

Grafo * grafo_cria ();
void grafo_libera (Grafo * grafo);
Item * adiciona_item(Item* item, Vertice * vertice);
Item * busca_item(Item * item, Vertice * vertice);
int grafo_qtd_vertices (Grafo * grafo);
Vertice ** grafo_busca_vertices_saida(Grafo * grafo, Vertice * vertice, int * cont);
Vertice ** grafo_busca_vertices_entrada(Grafo * grafo, Vertice * vertice, int * cont);
Vertice * grafo_busca_vertice_fonte(Grafo * grafo);
Vertice * grafo_busca_vertice_sumidouro(Grafo * grafo);
void grafo_resetar_arestas(Grafo* grafo);
void grafo_insere_aresta (Grafo * grafo, Vertice * vertice1, Vertice * vertice2, int peso);
Aresta * grafo_busca_aresta(Grafo * grafo, Vertice * vertice1, Vertice * vertice2);
void grafo_remove_aresta (Grafo* grafo, Vertice * vertice1, Vertice * vertice2);
Vertice * grafo_cria_vertice(Grafo * grafo, const char nome[]);
Vertice * grafo_retorna_vertice(Grafo * grafo, int indice);
Vertice * grafo_retorna_vertice_por_nome(Grafo * grafo, char* nome);
char * grafo_retorna_nome(Vertice * vertice);
void grafo_imprime(Grafo * grafo, Vertice * verticeFonte);
void grafo_imprime_maior_caminho(Grafo * grafo, Vertice * vertice);
int grafo_maior_caminho_volta(Grafo * grafo, Vertice * verticeFonte, Vertice * verticeSumidouro, int idaCaminho);
int grafo_maior_caminho_ida(Grafo * grafo, Vertice * verticeFonte, Vertice * verticeSumidouro, int maiorCaminho);
void grafo_teste_insercao_custo0(Grafo* grafo, Vertice* verticeFonte, Vertice* verticeSumidouro);
void lerArquivo(Grafo* grafo);
